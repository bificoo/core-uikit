'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var getBoundingClientRect = require('./getBoundingClientRect.js');
var getNodeScroll = require('./getNodeScroll.js');
var getNodeName = require('./getNodeName.js');
var instanceOf = require('./instanceOf.js');
var getWindowScrollBarX = require('./getWindowScrollBarX.js');
var getDocumentElement = require('./getDocumentElement.js');
var isScrollParent = require('./isScrollParent.js');

// Composite means it takes into account transforms as well as layout.

function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var documentElement = getDocumentElement['default'](offsetParent);
  var rect = getBoundingClientRect['default'](elementOrVirtualElement);
  var isOffsetParentAnElement = instanceOf.isHTMLElement(offsetParent);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName['default'](offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent['default'](documentElement)) {
      scroll = getNodeScroll['default'](offsetParent);
    }

    if (instanceOf.isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect['default'](offsetParent);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX['default'](documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

exports.default = getCompositeRect;
