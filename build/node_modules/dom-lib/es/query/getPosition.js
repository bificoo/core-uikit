'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var getOffsetParent = require('./getOffsetParent.js');
var getOffset = require('./getOffset.js');
var getStyle = require('../style/getStyle.js');
var scrollTop = require('./scrollTop.js');
var scrollLeft = require('./scrollLeft.js');
var nodeName = require('./nodeName.js');

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
var getPosition = (function (node, offsetParent) {
  var parentOffset = {
    top: 0,
    left: 0
  };
  var offset = null; // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
  // because it is its only offset parent

  if (getStyle['default'](node, 'position') === 'fixed') {
    offset = node.getBoundingClientRect();
  } else {
    offsetParent = offsetParent || getOffsetParent['default'](node);
    offset = getOffset['default'](node);

    if (nodeName['default'](offsetParent) !== 'html') {
      var nextParentOffset = getOffset['default'](offsetParent);

      if (nextParentOffset) {
        parentOffset.top = nextParentOffset.top;
        parentOffset.left = nextParentOffset.left;
      }
    }

    parentOffset.top += parseInt(getStyle['default'](offsetParent, 'borderTopWidth'), 10) - scrollTop['default'](offsetParent) || 0;
    parentOffset.left += parseInt(getStyle['default'](offsetParent, 'borderLeftWidth'), 10) - scrollLeft['default'](offsetParent) || 0;
  } // Subtract parent offsets and node margins


  if (offset) {
    return _extends({}, offset, {
      top: offset.top - parentOffset.top - (parseInt(getStyle['default'](node, 'marginTop'), 10) || 0),
      left: offset.left - parentOffset.left - (parseInt(getStyle['default'](node, 'marginLeft'), 10) || 0)
    });
  }

  return null;
});

exports['default'] = getPosition;
