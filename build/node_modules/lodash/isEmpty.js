'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _baseKeys = require('./_baseKeys.js');
var _getTag = require('./_getTag.js');
var isArguments$1 = require('./isArguments.js');
var isArray$1 = require('./isArray.js');
var isArrayLike$1 = require('./isArrayLike.js');
require('./isBuffer.js');
var _isPrototype = require('./_isPrototype.js');
var isTypedArray$1 = require('./isTypedArray.js');
var isBuffer$1 = require('../../_virtual/isBuffer.js_commonjs-module');

var baseKeys = _baseKeys['default'],
    getTag = _getTag['default'],
    isArguments = isArguments$1['default'],
    isArray = isArray$1['default'],
    isArrayLike = isArrayLike$1['default'],
    isBuffer = isBuffer$1.isBuffer.exports,
    isPrototype = _isPrototype['default'],
    isTypedArray = isTypedArray$1['default'];

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) &&
      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

var isEmpty_1 = isEmpty;

exports['default'] = isEmpty_1;
