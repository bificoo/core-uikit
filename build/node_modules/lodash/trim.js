'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _baseToString = require('./_baseToString.js');
var _baseTrim = require('./_baseTrim.js');
var _castSlice = require('./_castSlice.js');
var _charsEndIndex = require('./_charsEndIndex.js');
var _charsStartIndex = require('./_charsStartIndex.js');
var _stringToArray = require('./_stringToArray.js');
var toString$1 = require('./toString.js');

var baseToString = _baseToString['default'],
    baseTrim = _baseTrim['default'],
    castSlice = _castSlice['default'],
    charsEndIndex = _charsEndIndex['default'],
    charsStartIndex = _charsStartIndex['default'],
    stringToArray = _stringToArray['default'],
    toString = toString$1['default'];

/**
 * Removes leading and trailing whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trim('  abc  ');
 * // => 'abc'
 *
 * _.trim('-_-abc-_-', '_-');
 * // => 'abc'
 *
 * _.map(['  foo  ', '  bar  '], _.trim);
 * // => ['foo', 'bar']
 */
function trim(string, chars, guard) {
  string = toString(string);
  if (string && (guard || chars === undefined)) {
    return baseTrim(string);
  }
  if (!string || !(chars = baseToString(chars))) {
    return string;
  }
  var strSymbols = stringToArray(string),
      chrSymbols = stringToArray(chars),
      start = charsStartIndex(strSymbols, chrSymbols),
      end = charsEndIndex(strSymbols, chrSymbols) + 1;

  return castSlice(strSymbols, start, end).join('');
}

var trim_1 = trim;

exports['default'] = trim_1;
