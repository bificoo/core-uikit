'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var requestAnimationTimeout$1 = require('../../../../../_virtual/requestAnimationTimeout.js_commonjs-exports');
require('../../../../@babel/runtime/helpers/interopRequireDefault.js');
require('./animationFrame.js');
require('../../../../prop-types/index.js');
var animationFrame = require('../../../../../_virtual/animationFrame.js_commonjs-exports');
var index = require('../../../../../_virtual/index3.js_commonjs-module');
var interopRequireDefault = require('../../../../../_virtual/interopRequireDefault.js_commonjs-module');

var _interopRequireDefault = interopRequireDefault.interopRequireDefault.exports;

Object.defineProperty(requestAnimationTimeout$1.__exports, "__esModule", {
  value: true
});
requestAnimationTimeout$1.__exports.bpfrpt_proptype_AnimationTimeoutId = requestAnimationTimeout$1.__exports.requestAnimationTimeout = requestAnimationTimeout$1.__exports.cancelAnimationTimeout = void 0;

var _animationFrame = animationFrame.__exports;

var _propTypes = _interopRequireDefault(index.propTypes.exports);

var bpfrpt_proptype_AnimationTimeoutId = process.env.NODE_ENV === 'production' ? null : {
  "id": _propTypes["default"].number.isRequired
};
requestAnimationTimeout$1.__exports.bpfrpt_proptype_AnimationTimeoutId = bpfrpt_proptype_AnimationTimeoutId;

var cancelAnimationTimeout = function cancelAnimationTimeout(frame) {
  return (0, _animationFrame.caf)(frame.id);
};
/**
 * Recursively calls requestAnimationFrame until a specified delay has been met or exceeded.
 * When the delay time has been reached the function you're timing out will be called.
 *
 * Credit: Joe Lambert (https://gist.github.com/joelambert/1002116#file-requesttimeout-js)
 */


requestAnimationTimeout$1.__exports.cancelAnimationTimeout = cancelAnimationTimeout;

var requestAnimationTimeout = function requestAnimationTimeout(callback, delay) {
  var start; // wait for end of processing current event handler, because event handler may be long

  Promise.resolve().then(function () {
    start = Date.now();
  });

  var timeout = function timeout() {
    if (Date.now() - start >= delay) {
      callback.call();
    } else {
      frame.id = (0, _animationFrame.raf)(timeout);
    }
  };

  var frame = {
    id: (0, _animationFrame.raf)(timeout)
  };
  return frame;
};

requestAnimationTimeout$1.__exports.requestAnimationTimeout = requestAnimationTimeout;

exports.default = requestAnimationTimeout$1.__exports;
