'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('../../@babel/runtime/helpers/esm/extends.js');
var objectWithoutPropertiesLoose = require('../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var inheritsLoose = require('../../@babel/runtime/helpers/esm/inheritsLoose.js');
var React = require('react');
var index = require('../../prop-types/index.js');
var cx = require('classnames');
var constants = require('./constants.js');
var prefix = require('./utils/prefix.js');
var isNullOrUndefined = require('./utils/isNullOrUndefined.js');
var getUnhandledProps = require('./utils/getUnhandledProps.js');
require('../../lodash/isPlainObject.js');
require('../../lodash/_baseGetTag.js');
require('../../lodash/_stringToPath.js');
require('../../lodash/_baseToString.js');
require('./ColumnGroup.js');
require('./HeaderCell.js');
require('../../dom-lib/es/animation/cancelAnimationFramePolyfill.js');
require('../../dom-lib/es/animation/nativeRequestAnimationFrame.js');
require('../../dom-lib/es/animation/requestAnimationFramePolyfill.js');
require('../../dom-lib/es/transition/translateDOMPositionXY.js');
require('../../dom-lib/es/getVendorPrefixedName.js');
require('../../dom-lib/es/utils/emptyFunction.js');
require('../../dom-lib/es/normalizeWheel.js');
require('./utils/translateDOMPositionXY.js');
require('../../lodash/intersection.js');
require('../../dom-lib/lib/animation/requestAnimationFramePolyfill.js');
require('../../dom-lib/lib/animation/cancelAnimationFramePolyfill.js');
var TableContext = require('./TableContext.js');
var Column = require('./Column.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var propTypes = {
  align: index['default'].oneOf(['left', 'center', 'right']),
  verticalAlign: index['default'].oneOf(['top', 'middle', 'bottom']),
  className: index['default'].string,
  classPrefix: index['default'].string,
  dataKey: index['default'].string,
  isHeaderCell: index['default'].bool,
  width: index['default'].number,
  height: index['default'].oneOfType([index['default'].number, index['default'].func]),
  left: index['default'].number,
  headerHeight: index['default'].number,
  style: index['default'].object,
  firstColumn: index['default'].bool,
  lastColumn: index['default'].bool,
  hasChildren: index['default'].bool,
  children: index['default'].any,
  rowKey: index['default'].oneOfType([index['default'].string, index['default'].number]),
  rowIndex: index['default'].number,
  rowData: index['default'].object,
  depth: index['default'].number,
  onTreeToggle: index['default'].func,
  renderTreeToggle: index['default'].func,
  renderCell: index['default'].func,
  wordWrap: index['default'].bool,
  removed: index['default'].bool,
  treeCol: index['default'].bool,
  expanded: index['default'].bool,
  groupHeader: index['default'].node,
  groupCount: index['default'].number
};

var Cell = /*#__PURE__*/function (_React$PureComponent) {
  inheritsLoose['default'](Cell, _React$PureComponent);

  function Cell() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;

    _this.addPrefix = function (name) {
      return prefix.prefix(_this.props.classPrefix)(name);
    };

    _this.handleExpandClick = function (event) {
      var _this$props$onTreeTog, _this$props2;

      var _this$props = _this.props,
          rowKey = _this$props.rowKey,
          rowIndex = _this$props.rowIndex,
          rowData = _this$props.rowData;
      (_this$props$onTreeTog = (_this$props2 = _this.props).onTreeToggle) === null || _this$props$onTreeTog === void 0 ? void 0 : _this$props$onTreeTog.call(_this$props2, rowKey, rowIndex, rowData, event);
    };

    return _this;
  }

  var _proto = Cell.prototype;

  _proto.isTreeCol = function isTreeCol() {
    var _this$props3 = this.props,
        treeCol = _this$props3.treeCol,
        firstColumn = _this$props3.firstColumn;
    var _this$context = this.context,
        hasCustomTreeCol = _this$context.hasCustomTreeCol,
        isTree = _this$context.isTree;

    if (treeCol) {
      return true;
    }

    if (!hasCustomTreeCol && firstColumn && isTree) {
      return true;
    }

    return false;
  };

  _proto.getHeight = function getHeight() {
    var _this$props4 = this.props,
        height = _this$props4.height,
        rowData = _this$props4.rowData;
    return typeof height === 'function' ? height(rowData) : height;
  };

  _proto.renderTreeNodeExpandIcon = function renderTreeNodeExpandIcon() {
    var _this$props5 = this.props,
        rowData = _this$props5.rowData,
        renderTreeToggle = _this$props5.renderTreeToggle,
        hasChildren = _this$props5.hasChildren,
        expanded = _this$props5.expanded;
    var expandButton = /*#__PURE__*/React__namespace.createElement("i", {
      className: this.addPrefix('expand-icon')
    });

    if (this.isTreeCol() && hasChildren) {
      return /*#__PURE__*/React__namespace.createElement("span", {
        role: "button",
        tabIndex: -1,
        className: this.addPrefix('expand-wrapper'),
        onClick: this.handleExpandClick
      }, renderTreeToggle ? renderTreeToggle(expandButton, rowData, expanded) : expandButton);
    }

    return null;
  };

  _proto.render = function render() {
    var _classNames, _extends2, _contentStyles;

    var _this$props6 = this.props,
        width = _this$props6.width,
        left = _this$props6.left,
        style = _this$props6.style,
        className = _this$props6.className,
        firstColumn = _this$props6.firstColumn,
        lastColumn = _this$props6.lastColumn,
        isHeaderCell = _this$props6.isHeaderCell,
        headerHeight = _this$props6.headerHeight,
        align = _this$props6.align,
        children = _this$props6.children,
        rowData = _this$props6.rowData,
        dataKey = _this$props6.dataKey,
        rowIndex = _this$props6.rowIndex,
        renderCell = _this$props6.renderCell,
        removed = _this$props6.removed,
        wordWrap = _this$props6.wordWrap,
        classPrefix = _this$props6.classPrefix,
        depth = _this$props6.depth,
        verticalAlign = _this$props6.verticalAlign,
        expanded = _this$props6.expanded,
        onClick = _this$props6.onClick,
        rest = objectWithoutPropertiesLoose['default'](_this$props6, ["width", "left", "style", "className", "firstColumn", "lastColumn", "isHeaderCell", "headerHeight", "align", "children", "rowData", "dataKey", "rowIndex", "renderCell", "removed", "wordWrap", "classPrefix", "depth", "verticalAlign", "expanded", "onClick"]);

    if (removed) {
      return null;
    }

    var classes = cx__default['default'](classPrefix, className, (_classNames = {}, _classNames[this.addPrefix('expanded')] = expanded && this.isTreeCol(), _classNames[this.addPrefix('first')] = firstColumn, _classNames[this.addPrefix('last')] = lastColumn, _classNames));
    var rtl = this.context.rtl;
    var nextHeight = isHeaderCell ? headerHeight : this.getHeight();

    var styles = _extends['default']({}, style, (_extends2 = {
      width: width,
      height: nextHeight,
      zIndex: depth
    }, _extends2[rtl ? 'right' : 'left'] = left, _extends2));

    var contentStyles = (_contentStyles = {
      width: width,
      height: nextHeight,
      textAlign: align
    }, _contentStyles[rtl ? 'paddingRight' : 'paddingLeft'] = this.isTreeCol() ? depth * constants.LAYER_WIDTH + 10 : null, _contentStyles);

    if (verticalAlign) {
      contentStyles.display = 'table-cell';
      contentStyles.verticalAlign = verticalAlign;
    }

    var cellContent = isNullOrUndefined['default'](children) && rowData ? rowData[dataKey] : children;

    if (typeof children === 'function') {
      var getChildren = children;
      cellContent = getChildren(rowData, rowIndex);
    }

    var unhandledProps = getUnhandledProps['default'](propTypes, getUnhandledProps['default'](Column['default'].propTypes, rest));
    var cell = renderCell ? renderCell(cellContent) : cellContent;
    var content = wordWrap ? /*#__PURE__*/React__namespace.createElement("div", {
      className: this.addPrefix('wrap')
    }, this.renderTreeNodeExpandIcon(), cell) : /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, this.renderTreeNodeExpandIcon(), cell);
    return /*#__PURE__*/React__namespace.createElement("div", _extends['default']({
      role: isHeaderCell ? 'columnheader' : 'gridcell'
    }, unhandledProps, {
      onClick: onClick,
      className: classes,
      style: styles
    }), /*#__PURE__*/React__namespace.createElement("div", {
      className: this.addPrefix('content'),
      style: contentStyles
    }, content));
  };

  return Cell;
}(React__namespace.PureComponent);

Cell.contextType = TableContext['default'];
Cell.propTypes = propTypes;
Cell.defaultProps = {
  classPrefix: prefix.defaultClassPrefix('table-cell'),
  headerHeight: 36,
  depth: 0,
  height: 36,
  width: 0,
  left: 0
};

exports['default'] = Cell;
exports.propTypes = propTypes;
