import _extends from '../../@babel/runtime/helpers/esm/extends.js';
import _objectWithoutPropertiesLoose from '../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js';
import React__default, { useContext } from 'react';
import './utils/prefix.js';
import '../../lodash/isPlainObject.js';
import '../../lodash/_baseGetTag.js';
import '../../lodash/_stringToPath.js';
import '../../lodash/_baseToString.js';
import './ColumnGroup.js';
import './HeaderCell.js';
import './utils/translateDOMPositionXY.js';
import '../../dom-lib/esm/requestAnimationFramePolyfill.js';
import '../../dom-lib/esm/cancelAnimationFramePolyfill.js';
import useClassNames from './utils/useClassNames.js';
import '../../react-is/index.js';
import '../../lodash/_isFlattenable.js';
import '../../lodash/omit.js';
import '../../lodash/merge.js';
import '../../@juggle/resize-observer/lib/ResizeObserver.js';
import '../../@juggle/resize-observer/lib/algorithms/calculateBoxSize.js';
import '../../lodash/_getTag.js';
import '../../lodash/isArguments.js';
import '../../lodash/isBuffer.js';
import '../../lodash/isTypedArray.js';
import '../../dom-lib/esm/utils/emptyFunction.js';
import '../../dom-lib/esm/utils/normalizeWheel.js';
import TableContext from './TableContext.js';

var CellGroup = /*#__PURE__*/React__default.forwardRef(function (props, ref) {
  var _withClassPrefix;

  var fixed = props.fixed,
      width = props.width,
      left = props.left,
      height = props.height,
      style = props.style,
      _props$classPrefix = props.classPrefix,
      classPrefix = _props$classPrefix === void 0 ? 'cell-group' : _props$classPrefix,
      className = props.className,
      children = props.children,
      rest = _objectWithoutPropertiesLoose(props, ["fixed", "width", "left", "height", "style", "classPrefix", "className", "children"]);

  var _useContext = useContext(TableContext),
      translateDOMPositionXY = _useContext.translateDOMPositionXY;

  var _useClassNames = useClassNames(classPrefix),
      withClassPrefix = _useClassNames.withClassPrefix,
      merge = _useClassNames.merge;

  var classes = merge(className, withClassPrefix((_withClassPrefix = {}, _withClassPrefix["fixed-" + fixed] = fixed, _withClassPrefix.scroll = !fixed, _withClassPrefix)));

  var styles = _extends({
    width: width,
    height: height
  }, style);

  translateDOMPositionXY === null || translateDOMPositionXY === void 0 ? void 0 : translateDOMPositionXY(styles, left, 0);
  return /*#__PURE__*/React__default.createElement("div", _extends({}, rest, {
    ref: ref,
    className: classes,
    style: styles
  }), children);
});
CellGroup.displayName = 'Table.CellGroup';

export { CellGroup as default };
