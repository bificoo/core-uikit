import _extends from '../../@babel/runtime/helpers/esm/extends.js';
import _objectWithoutPropertiesLoose from '../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js';
import React__default, { useContext, useRef, useCallback, useEffect } from 'react';
import PropTypes from '../../prop-types/index.js';
import clamp_1 from '../../lodash/clamp.js';
import DOMMouseMoveTracker from '../../dom-lib/esm/DOMMouseMoveTracker.js';
import './utils/prefix.js';
import '../../lodash/isPlainObject.js';
import '../../lodash/_baseGetTag.js';
import '../../lodash/_stringToPath.js';
import '../../lodash/_baseToString.js';
import './ColumnGroup.js';
import './HeaderCell.js';
import { RESIZE_MIN_WIDTH } from './constants.js';
import './utils/translateDOMPositionXY.js';
import '../../dom-lib/esm/requestAnimationFramePolyfill.js';
import '../../dom-lib/esm/cancelAnimationFramePolyfill.js';
import useClassNames from './utils/useClassNames.js';
import '../../react-is/index.js';
import '../../lodash/_isFlattenable.js';
import '../../lodash/omit.js';
import '../../lodash/merge.js';
import '../../@juggle/resize-observer/lib/ResizeObserver.js';
import '../../@juggle/resize-observer/lib/algorithms/calculateBoxSize.js';
import '../../lodash/_getTag.js';
import '../../lodash/isArguments.js';
import '../../lodash/isBuffer.js';
import '../../lodash/isTypedArray.js';
import '../../dom-lib/esm/utils/emptyFunction.js';
import '../../dom-lib/esm/utils/normalizeWheel.js';
import TableContext from './TableContext.js';

var ColumnResizeHandler = /*#__PURE__*/React__default.forwardRef(function (props, ref) {
  var _extends2;

  var columnLeft = props.columnLeft,
      classPrefix = props.classPrefix,
      height = props.height,
      className = props.className,
      style = props.style,
      columnFixed = props.columnFixed,
      defaultColumnWidth = props.defaultColumnWidth,
      minWidth = props.minWidth,
      onColumnResizeStart = props.onColumnResizeStart,
      onColumnResizeMove = props.onColumnResizeMove,
      onColumnResizeEnd = props.onColumnResizeEnd,
      rest = _objectWithoutPropertiesLoose(props, ["columnLeft", "classPrefix", "height", "className", "style", "columnFixed", "defaultColumnWidth", "minWidth", "onColumnResizeStart", "onColumnResizeMove", "onColumnResizeEnd"]);

  var _useContext = useContext(TableContext),
      rtl = _useContext.rtl;

  var _useClassNames = useClassNames(classPrefix),
      withClassPrefix = _useClassNames.withClassPrefix,
      merge = _useClassNames.merge;

  var classes = merge(className, withClassPrefix());
  var columnWidth = useRef(defaultColumnWidth || 0);
  var mouseMoveTracker = useRef();
  var isKeyDown = useRef();
  var cursorDelta = useRef();
  var handleMove = useCallback(function (deltaX) {
    if (!isKeyDown.current) {
      return;
    }

    cursorDelta.current += deltaX;
    columnWidth.current = clamp_1(defaultColumnWidth + (rtl ? -cursorDelta.current : cursorDelta.current), minWidth ? Math.max(minWidth, RESIZE_MIN_WIDTH) : RESIZE_MIN_WIDTH, 20000);
    onColumnResizeMove === null || onColumnResizeMove === void 0 ? void 0 : onColumnResizeMove(columnWidth.current, columnLeft, columnFixed);
  }, [columnFixed, columnLeft, defaultColumnWidth, minWidth, onColumnResizeMove, rtl]);
  var handleColumnResizeEnd = useCallback(function () {
    var _mouseMoveTracker$cur, _mouseMoveTracker$cur2;

    isKeyDown.current = false;
    onColumnResizeEnd === null || onColumnResizeEnd === void 0 ? void 0 : onColumnResizeEnd(columnWidth.current, cursorDelta.current);
    (_mouseMoveTracker$cur = mouseMoveTracker.current) === null || _mouseMoveTracker$cur === void 0 ? void 0 : (_mouseMoveTracker$cur2 = _mouseMoveTracker$cur.releaseMouseMoves) === null || _mouseMoveTracker$cur2 === void 0 ? void 0 : _mouseMoveTracker$cur2.call(_mouseMoveTracker$cur);
    mouseMoveTracker.current = null;
  }, [onColumnResizeEnd]);
  var getMouseMoveTracker = useCallback(function () {
    return mouseMoveTracker.current || new DOMMouseMoveTracker(handleMove, handleColumnResizeEnd, document.body);
  }, [handleColumnResizeEnd, handleMove]);
  var handleColumnResizeMouseDown = useCallback(function (event) {
    mouseMoveTracker.current = getMouseMoveTracker();
    mouseMoveTracker.current.captureMouseMoves(event);
    isKeyDown.current = true;
    cursorDelta.current = 0;
    var client = {
      clientX: event.clientX,
      clientY: event.clientY,
      preventDefault: Function()
    };
    onColumnResizeStart === null || onColumnResizeStart === void 0 ? void 0 : onColumnResizeStart(client);
  }, [getMouseMoveTracker, onColumnResizeStart]);
  useEffect(function () {
    return function () {
      var _mouseMoveTracker$cur3;

      (_mouseMoveTracker$cur3 = mouseMoveTracker.current) === null || _mouseMoveTracker$cur3 === void 0 ? void 0 : _mouseMoveTracker$cur3.releaseMouseMoves();
      mouseMoveTracker.current = null;
    };
  }, []);

  if (columnFixed === 'right') {
    return null;
  }

  var styles = _extends((_extends2 = {}, _extends2[rtl ? 'right' : 'left'] = columnWidth.current + columnLeft - 2, _extends2.height = height, _extends2), style);

  return /*#__PURE__*/React__default.createElement("div", _extends({
    tabIndex: -1,
    role: "button",
    ref: ref
  }, rest, {
    className: classes,
    style: styles,
    onMouseDown: handleColumnResizeMouseDown
  }));
});
ColumnResizeHandler.displayName = 'Table.ColumnResizeHandler';
ColumnResizeHandler.defaultProps = {
  columnLeft: 0,
  classPrefix: 'column-resize-spanner'
};
ColumnResizeHandler.propTypes = {
  height: PropTypes.number,
  defaultColumnWidth: PropTypes.number,
  columnLeft: PropTypes.number,
  columnFixed: PropTypes.any,
  className: PropTypes.string,
  classPrefix: PropTypes.string,
  minWidth: PropTypes.number,
  style: PropTypes.object,
  onColumnResizeStart: PropTypes.func,
  onColumnResizeEnd: PropTypes.func,
  onColumnResizeMove: PropTypes.func
};

export { ColumnResizeHandler as default };
