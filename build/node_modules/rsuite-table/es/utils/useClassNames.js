import { useContext, useCallback } from 'react';
import cx from 'classnames';
import { prefix } from './prefix.js';
import TableContext from '../TableContext.js';

/**
 * Add a prefix to all classNames.
 *
 * @param str prefix of className
 * @returns { withClassPrefix, merge, prefix }
 *  - withClassPrefix: A function of combining className and adding a prefix to each className.
 *    At the same time, the default `classPrefix` is the first className.
 *  - merge: A merge className function.
 *  - prefix: Add a prefix to className
 *  - rootPrefix
 */
function useClassNames(str, controlled) {
  var _ref = useContext(TableContext) || {},
      _ref$classPrefix = _ref.classPrefix,
      contextClassPrefix = _ref$classPrefix === void 0 ? 'rs' : _ref$classPrefix;

  var componentName = controlled ? str : prefix(contextClassPrefix, str);
  /**
   * @example
   *
   * if str = 'button':
   * prefix('red', { active: true }) => 'rs-button-red rs-button-active'
   */

  var prefix$1 = useCallback(function () {
    var mergeClasses = arguments.length ? cx.apply(void 0, arguments).split(' ').map(function (item) {
      return prefix(componentName, item);
    }) : [];
    return mergeClasses.filter(function (cls) {
      return cls;
    }).join(' ');
  }, [componentName]);
  /**
   * @example
   *
   * if str = 'button':
   * withClassPrefix('red', { active: true }) => 'rs-button rs-button-red rs-button-active'
   */

  var withClassPrefix = useCallback(function () {
    for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {
      classes[_key] = arguments[_key];
    }

    var mergeClasses = prefix$1(classes);
    return mergeClasses ? componentName + " " + mergeClasses : componentName;
  }, [componentName, prefix$1]);
  /**
   * @example
   * rootPrefix('btn') => 'rs-btn'
   * rootPrefix('btn', { active: true }) => 'rs-btn rs-active'
   */

  var rootPrefix = function rootPrefix() {
    var mergeClasses = arguments.length ? cx.apply(void 0, arguments).split(' ').map(function (item) {
      return prefix(contextClassPrefix, item);
    }) : [];
    return mergeClasses.filter(function (cls) {
      return cls;
    }).join(' ');
  };

  return {
    withClassPrefix: withClassPrefix,
    merge: cx,
    prefix: prefix$1,
    rootPrefix: rootPrefix
  };
}

export { useClassNames as default };
