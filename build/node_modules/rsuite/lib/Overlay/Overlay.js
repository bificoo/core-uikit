'use strict';

var Overlay = require('../../../../_virtual/Overlay.js_commonjs-module');
require('../../../@babel/runtime/helpers/interopRequireWildcard.js');
require('../../../@babel/runtime/helpers/interopRequireDefault.js');
require('../../../@babel/runtime/helpers/extends.js');
require('../../../@babel/runtime/helpers/objectWithoutPropertiesLoose.js');
var React = require('react');
require('../../../prop-types/index.js');
var cx = require('classnames');
require('./BaseOverlay.js');
require('../Animation/Fade.js');
require('../utils/refType.js');
var BaseOverlay = require('../../../../_virtual/BaseOverlay.js_commonjs-module');
var Fade = require('../../../../_virtual/Fade.js_commonjs-module');
var _extends = require('../../../../_virtual/extends.js_commonjs-module');
var objectWithoutPropertiesLoose = require('../../../../_virtual/objectWithoutPropertiesLoose.js_commonjs-module');
var index = require('../../../../_virtual/index3.js_commonjs-module');
var refType = require('../../../../_virtual/refType.js_commonjs-module');
var interopRequireWildcard = require('../../../../_virtual/interopRequireWildcard.js_commonjs-module');
var interopRequireDefault = require('../../../../_virtual/interopRequireDefault.js_commonjs-module');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

(function (module, exports) {

var _interopRequireWildcard = interopRequireWildcard.interopRequireWildcard.exports;

var _interopRequireDefault = interopRequireDefault.interopRequireDefault.exports;

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(_extends._extends.exports);

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(objectWithoutPropertiesLoose.objectWithoutPropertiesLoose.exports);

var React = _interopRequireWildcard(React__default['default']);

var _propTypes = _interopRequireDefault(index.propTypes.exports);

var _classnames = _interopRequireDefault(cx__default['default']);

var _BaseOverlay = _interopRequireDefault(BaseOverlay.BaseOverlay.exports);

var _Fade = _interopRequireDefault(Fade.Fade.exports);

var _refType = _interopRequireDefault(refType.refType.exports);

var Overlay = function Overlay(_ref) {
  var _ref$animation = _ref.animation,
      animation = _ref$animation === void 0 ? true : _ref$animation,
      children = _ref.children,
      _ref$transition = _ref.transition,
      transition = _ref$transition === void 0 ? _Fade.default : _ref$transition,
      rest = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["animation", "children", "transition"]);
  var child = children;

  if (!animation) {
    transition = undefined;
  }

  if (!transition) {
    child = React.Children.only(child);
    child = React.cloneElement(child, {
      className: (0, _classnames.default)('in', child.props.className)
    });
  }

  return React.createElement(_BaseOverlay.default, (0, _extends2.default)({}, rest, {
    transition: transition
  }), child);
};

Overlay.propTypes = {
  animation: _propTypes.default.bool,
  container: _propTypes.default.any,
  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  onRendered: _propTypes.default.func,
  className: _propTypes.default.string,
  containerPadding: _propTypes.default.number,
  placement: _propTypes.default.string,
  shouldUpdatePosition: _propTypes.default.bool,
  preventOverflow: _propTypes.default.bool,
  show: _propTypes.default.bool,
  rootClose: _propTypes.default.bool,
  transition: _propTypes.default.elementType,
  positionRef: _refType.default,
  target: _propTypes.default.func,
  onHide: _propTypes.default.func,
  onEnter: _propTypes.default.func,
  onEntering: _propTypes.default.func,
  onEntered: _propTypes.default.func,
  onExit: _propTypes.default.func,
  onExiting: _propTypes.default.func,
  onExited: _propTypes.default.func
};
var _default = Overlay;
exports.default = _default;
module.exports = exports.default;
}(Overlay.Overlay, Overlay.Overlay.exports));
