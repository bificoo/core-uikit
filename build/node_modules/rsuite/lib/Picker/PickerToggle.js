'use strict';

var PickerToggle = require('../../../../_virtual/PickerToggle.js_commonjs-module');
require('../../../@babel/runtime/helpers/interopRequireWildcard.js');
require('../../../@babel/runtime/helpers/interopRequireDefault.js');
require('../../../@babel/runtime/helpers/extends.js');
require('../../../@babel/runtime/helpers/objectWithoutPropertiesLoose.js');
require('../../../@babel/runtime/helpers/inheritsLoose.js');
var get = require('../../../lodash/get.js');
var React = require('react');
var cx = require('classnames');
require('../../../prop-types/index.js');
require('../utils/index.js');
require('./DefaultToggleButton.js');
var DefaultToggleButton = require('../../../../_virtual/DefaultToggleButton.js_commonjs-module');
var index$1 = require('../../../../_virtual/index.js_commonjs-exports');
var _extends = require('../../../../_virtual/extends.js_commonjs-module');
var objectWithoutPropertiesLoose = require('../../../../_virtual/objectWithoutPropertiesLoose.js_commonjs-module');
var inheritsLoose = require('../../../../_virtual/inheritsLoose.js_commonjs-module');
var index = require('../../../../_virtual/index5.js_commonjs-module');
var interopRequireWildcard = require('../../../../_virtual/interopRequireWildcard.js_commonjs-module');
var interopRequireDefault = require('../../../../_virtual/interopRequireDefault.js_commonjs-module');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

(function (module, exports) {

var _interopRequireWildcard = interopRequireWildcard.interopRequireWildcard.exports;

var _interopRequireDefault = interopRequireDefault.interopRequireDefault.exports;

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(_extends._extends.exports);

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(objectWithoutPropertiesLoose.objectWithoutPropertiesLoose.exports);

var _inheritsLoose2 = _interopRequireDefault(inheritsLoose.inheritsLoose.exports);

var _get2 = _interopRequireDefault(get['default']);

var React = _interopRequireWildcard(React__default['default']);

var _classnames = _interopRequireDefault(cx__default['default']);

var _propTypes = _interopRequireDefault(index.propTypes.exports);

var _utils = index$1.__exports;

var _DefaultToggleButton = _interopRequireDefault(DefaultToggleButton.DefaultToggleButton.exports);

var PickerToggle =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(PickerToggle, _React$Component);

  function PickerToggle(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.toggleRef = void 0;

    _this.addPrefix = function (name) {
      return (0, _utils.prefix)(_this.props.classPrefix)(name);
    };

    _this.handleClean = function (event) {
      var _this$props$onClean, _this$props;

      (_this$props$onClean = (_this$props = _this.props).onClean) === null || _this$props$onClean === void 0 ? void 0 : _this$props$onClean.call(_this$props, event);
      event.stopPropagation();

      _this.handleBlur();
    };

    _this.handleFocus = function () {
      _this.setState({
        active: true
      });
    };

    _this.handleBlur = function () {
      _this.setState({
        active: false
      });
    };

    _this.getToggleNode = function () {
      return _this.toggleRef.current;
    };

    _this.onFocus = function () {
      var _this$toggleRef, _this$toggleRef$curre;

      if (typeof ((_this$toggleRef = _this.toggleRef) === null || _this$toggleRef === void 0 ? void 0 : (_this$toggleRef$curre = _this$toggleRef.current) === null || _this$toggleRef$curre === void 0 ? void 0 : _this$toggleRef$curre.focus) === 'function') {
        _this.toggleRef.current.focus();
      }
    };

    _this.state = {
      active: false
    };
    _this.toggleRef = React.createRef();
    return _this;
  }

  var _proto = PickerToggle.prototype;

  _proto.renderToggleClean = function renderToggleClean() {
    return React.createElement("span", {
      className: this.addPrefix('clean'),
      role: "button",
      tabIndex: -1,
      onClick: this.handleClean
    }, "\u2715");
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        Component = _this$props2.componentClass,
        children = _this$props2.children,
        className = _this$props2.className,
        hasValue = _this$props2.hasValue,
        cleanable = _this$props2.cleanable,
        classPrefix = _this$props2.classPrefix,
        caret = _this$props2.caret,
        active = _this$props2.active,
        tabIndex = _this$props2.tabIndex,
        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props2, ["componentClass", "children", "className", "hasValue", "cleanable", "classPrefix", "caret", "active", "tabIndex"]);
    var classes = (0, _classnames.default)(classPrefix, className, {
      active: active || this.state.active
    });
    var unhandled = (0, _utils.getUnhandledProps)(PickerToggle, rest);
    return React.createElement(Component, (0, _extends2.default)({}, unhandled, {
      role: "combobox",
      tabIndex: tabIndex,
      className: classes,
      ref: this.toggleRef,
      onFocus: (0, _utils.createChainedFunction)(this.handleFocus, (0, _get2.default)(unhandled, 'onFocus')),
      onBlur: (0, _utils.createChainedFunction)(this.handleBlur, (0, _get2.default)(unhandled, 'onBlur'))
    }), React.createElement("span", {
      className: this.addPrefix(hasValue ? 'value' : 'placeholder')
    }, children), hasValue && cleanable && this.renderToggleClean(), caret && React.createElement("span", {
      className: this.addPrefix('caret')
    }));
  };

  return PickerToggle;
}(React.Component);

PickerToggle.propTypes = {
  classPrefix: _propTypes.default.string,
  hasValue: _propTypes.default.bool,
  cleanable: _propTypes.default.bool,
  className: _propTypes.default.string,
  children: _propTypes.default.node,
  caret: _propTypes.default.bool,
  componentClass: _propTypes.default.elementType,
  onClean: _propTypes.default.func,
  active: _propTypes.default.bool
};
PickerToggle.defaultProps = {
  componentClass: _DefaultToggleButton.default,
  tabIndex: 0,
  caret: true
};
var enhance = (0, _utils.defaultProps)({
  classPrefix: 'picker-toggle'
});

var _default = enhance(PickerToggle);

exports.default = _default;
module.exports = exports.default;
}(PickerToggle.PickerToggle, PickerToggle.PickerToggle.exports));
